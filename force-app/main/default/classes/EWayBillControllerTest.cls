@isTest
public class EWayBillControllerTest {

    @isTest
    public static void testEWWayBillController() {
          Account testAccount = new Account(Name = 'Test Account');
        insert testAccount;
        // Step 1: Create a test Invoice__c record to simulate the real data
        Invoice__c testInvoice = new Invoice__c(
            Name = 'Test Invoice',
            E_Way_Bill_No__c = 'EWB123456',
            E_Way_Bill_Date__c = Date.today(),
            Generated_By__c = 'Test Generated By',
            Valid_By__c = Date.today().addDays(30),
            Valid_Until__c = Date.today().addDays(30),
            GSTIN_of_Supplier__c = '27ABCDE1234F1Z5',
            Place_of_Dispatch__c = 'Place 1',
            GSTIN_of_Recipient__c = '29XYZABCD5678P9',
            Place_of_Delivery__c = 'Place 2',
            Document_No__c = 'DOC1234',
            Document_Date__c = Date.today(),
            Transcartion_Type__c = 'Goods',
            Value_of_Goods__c = 1000.50,
            HSN_Code__c = '1234',
            Reason_for_Transportation__c = 'Sale',
            Transporter__c = 'ABC Transport',
            Account__c=testAccount.Id
        );
        insert testInvoice;
        
        // Step 2: Simulate the ApexPage URL with the test Invoice ID
        Test.startTest();
        ApexPages.currentPage().getParameters().put('id', testInvoice.Id);
        ApexPages.StandardController sc = new ApexPages.StandardController(testInvoice);
        
        
        // Step 3: Instantiate the controller and check if the fields are populated
        EWayBillController controller = new EWayBillController(sc);
        
        // Step 4: Assert that the fields are correctly populated
        System.assertEquals('Test Invoice', controller.invoiceName);
        System.assertEquals('EWB123456', controller.EWayBillNo);
        //System.assertEquals(Date.today().format(), controller.EWayBillDate);
        System.assertEquals('Test Generated By', controller.GeneratedBy);
        System.assertEquals(Date.today().addDays(30).format(), controller.ValidBy);
        System.assertEquals(Date.today().addDays(30).format(), controller.ValidUntil);
        System.assertEquals('27ABCDE1234F1Z5', controller.GSTINofSupplier);
        System.assertEquals('Place 1', controller.PlaceOfDispatch);
        System.assertEquals('29XYZABCD5678P9', controller.GSTINofRecipient);
        System.assertEquals('Place 2', controller.PlaceOfDelivery);
        System.assertEquals('DOC1234', controller.DocumentNo);
        System.assertEquals(Date.today().format(), controller.DocumentDate);
        System.assertEquals('Goods', controller.TransactionType);
        System.assertEquals('1000.5', controller.ValueOfGoods); // Should convert the Decimal value to String
        System.assertEquals('1234', controller.HSNCode);
        System.assertEquals('Sale', controller.ReasonForTransportation);
        System.assertEquals('ABC Transport', controller.Transporter);
        
        Test.stopTest();
    }
}